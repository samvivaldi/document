



@Bean(name="memberService2")

/* 모든 빈 출력하기 */
String[] beanDefinitionNames = ac.getBeanDefinitionNames();
for (String beanDefinitionName : beanDefinitionNames) {
	Object bean = ac.getBean(beanDefinitionName);
	System.out.println("name=" + beanDefinitionName + " object=" + bean);
}


/* 애플리케이션 빈 출력하기 */
String[] beanDefinitionNames = ac.getBeanDefinitionNames();
for (String beanDefinitionName : beanDefinitionNames) {
	BeanDefinition beanDefinition =
	ac.getBeanDefinition(beanDefinitionName);
	//Role ROLE_APPLICATION: 직접 등록한 애플리케이션 빈
	//Role ROLE_INFRASTRUCTURE: 스프링이 내부에서 사용하는 빈
	if (beanDefinition.getRole() == BeanDefinition.ROLE_APPLICATION) {
		Object bean = ac.getBean(beanDefinitionName);
		System.out.println("name=" + beanDefinitionName + " object=" + bean);
	}
}


/* 스프링 컨테이너에서 스프링 빈을 찾는 가장 기본적인 조회 방법 */
ac.getBean(빈이름, 타입)
ac.getBean(타입)

@DisplayName("부모 타입으로 모두 조회하기")
Map<String, DiscountPolicy> beansOfType = ac.getBeansOfType(DiscountPolicy.class);


@Bean만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다.
memberRepository() 처럼 의존관계 주입이 필요해서 메서드를 직접 호출할 때 싱글톤을 보장하지 않는다.
크게 고민할 것이 없다. 스프링 설정 정보는 항상 @Configuration 을 사용하자.



컴포넌트 스캔을 사용하려면 먼저 @ComponentScan 을 설정 정보에 붙여주면 된다.
@Configuration
@ComponentScan(basePackages = "hello.core", excludeFilters = @Filter(type = FilterType.ANNOTATION, classes = Configuration.class))

컴포넌트 스캔은 이름 그대로 @Component 애노테이션이 붙은 클래스를 스캔해서 스프링 빈으로
등록한다. @Component 를 붙여주자.

> 참고: @Configuration 이 컴포넌트 스캔의 대상이 된 이유도 @Configuration 소스코드를 열어보면
@Component 애노테이션이 붙어있기 때문이다.


@Component
public class MemberServiceImpl implements MemberService {
	private final MemberRepository memberRepository;
	
	@Autowired
	public MemberServiceImpl(MemberRepository memberRepository) {
		this.memberRepository = memberRepository;
	}
}



@ComponentScan 은 @Component 가 붙은 모든 클래스를 스프링 빈으로 등록한다.
이때 스프링 빈의 기본 이름은 클래스명을 사용하되 맨 앞글자만 소문자를 사용한다.
빈 이름 기본 전략: MemberServiceImpl 클래스 memberServiceImpl
빈 이름 직접 지정: 만약 스프링 빈의 이름을 직접 지정하고 싶으면
@Component("memberService2") 이런식으로 이름을 부여하면 된다.


참고로 스프링 부트를 사용하면 스프링 부트의 대표 시작 정보인 @SpringBootApplication 를 이
프로젝트 시작 루트 위치에 두는 것이 관례이다. (그리고 이 설정안에 바로 @ComponentScan 이 들어있다!)



컴포넌트 스캔 기본 대상
컴포넌트 스캔은 @Component 뿐만 아니라 다음과 내용도 추가로 대상에 포함한다.
@Component : 컴포넌트 스캔에서 사용
@Controlller : 스프링 MVC 컨트롤러에서 사용
@Service : 스프링 비즈니스 로직에서 사용
@Repository : 스프링 데이터 접근 계층에서 사용
@Configuration : 스프링 설정 정보에서 사용


의존관계 주입은 크게 4가지 방법이 있다.
생성자 주입
수정자 주입(setter 주입)
필드 주입
일반 메서드 주입



> 참고: 어쩌면 당연한 이야기이지만 의존관계 자동 주입은 스프링 컨테이너가 관리하는 스프링 빈이어야
동작한다. 스프링 빈이 아닌 Member 같은 클래스에서 @Autowired 코드를 적용해도 아무 기능도
동작하지 않는다.

-----------------------------------------------
옵션 처리
주입할 스프링 빈이 없어도 동작해야 할 때가 있다.
그런데 @Autowired 만 사용하면 required 옵션의 기본값이 true 로 되어 있어서 자동 주입 대상이 없으면 오류가 발생한다.
자동 주입 대상을 옵션으로 처리하는 방법은 다음과 같다.
@Autowired(required=false) : 자동 주입할 대상이 없으면 수정자 메서드 자체가 호출 안됨
org.springframework.lang.@Nullable : 자동 주입할 대상이 없으면 null이 입력된다.
Optional<> : 자동 주입할 대상이 없으면 Optional.empty 가 입력된다.


//호출 안됨
@Autowired(required = false)
public void setNoBean1(Member member) {
	System.out.println("setNoBean1 = " + member);
}

//null 호출
@Autowired
public void setNoBean2(@Nullable Member member) {
	System.out.println("setNoBean2 = " + member);
}

//Optional.empty 호출
@Autowired(required = false)
public void setNoBean3(Optional<Member> member) {
	System.out.println("setNoBean3 = " + member);
}

-----------------------------------------------
정리
- 생성자 주입 방식을 선택하는 이유는 여러가지가 있지만, 프레임워크에 의존하지 않고, 순수한 자바 언어의 특징을 잘 살리는 방법이기도 하다.
- 기본으로 생성자 주입을 사용하고, 필수 값이 아닌 경우에는 수정자 주입 방식을 옵션으로 부여하면 된다.
  생성자 주입과 수정자 주입을 동시에 사용할 수 있다.
- 항상 생성자 주입을 선택해라! 그리고 가끔 옵션이 필요하면 수정자 주입을 선택해라. 필드 주입은 사용하지 않는게 좋다.

-----------------------------------------------


@Component
public class FixDiscountPolicy implements DiscountPolicy {}

@Component
public class RateDiscountPolicy implements DiscountPolicy {}

에서
@Autowired
private DiscountPolicy discountPolicy 
는 NoUniqueBeanDefinitionException 오류 발생.

@Autowired 필드 명, @Qualifier, @Primary 해결 방법을 하나씩 알아보자.

조회 대상 빈이 2개 이상일 때 해결 방법
- @Autowired 필드 명 매칭
- @Qualifier @Qualifier끼리 매칭 빈 이름 매칭
- @Primary 사용


@Autowired
private DiscountPolicy discountPolicy

필드 명을 빈 이름으로 변경
@Autowired
private DiscountPolicy rateDiscountPolicy

필드 명이 rateDiscountPolicy 이므로 정상 주입된다.
필드 명 매칭은 먼저 타입 매칭을 시도 하고 그 결과에 여러 빈이 있을 때 추가로 동작하는 기능이다.


@Autowired 매칭 정리
1. 타입 매칭
2. 타입 매칭의 결과가 2개 이상일 때 필드 명, 파라미터 명으로 빈 이름 매칭


Qualifier(예선통과자, 예선전)
@Qualifier 사용
@Qualifier 는 추가 구분자를 붙여주는 방법이다. 주입시 추가적인 방법을 제공하는 것이지 빈 이름을 변경하는 것은 아니다.


@Component
@Qualifier("mainDiscountPolicy")
public class RateDiscountPolicy implements DiscountPolicy {}

@Component
@Qualifier("fixDiscountPolicy")
public class FixDiscountPolicy implements DiscountPolicy {}

생성자 자동 주입 예시
@Autowired
public OrderServiceImpl(MemberRepository memberRepository, @Qualifier("mainDiscountPolicy") DiscountPolicy discountPolicy) {
	this.memberRepository = memberRepository;
	this.discountPolicy = discountPolicy;
}


@Qualifier 정리
1. @Qualifier끼리 매칭
2. 빈 이름 매칭
3. NoSuchBeanDefinitionException 예외 발생


@Primary 사용
@Primary 는 우선순위를 정하는 방법이다. @Autowired 시에 여러 빈이 매칭되면 @Primary 가 우선권을
가진다.


@Primary, @Qualifier 활용
코드에서 자주 사용하는 메인 데이터베이스의 커넥션을 획득하는 스프링 빈이 있고, 코드에서 특별한
기능으로 가끔 사용하는 서브 데이터베이스의 커넥션을 획득하는 스프링 빈이 있다고 생각해보자. 메인
데이터베이스의 커넥션을 획득하는 스프링 빈은 @Primary 를 적용해서 조회하는 곳에서 @Qualifier
지정 없이 편리하게 조회하고, 서브 데이터베이스 커넥션 빈을 획득할 때는 @Qualifier 를 지정해서
명시적으로 획득 하는 방식으로 사용하면 코드를 깔끔하게 유지할 수 있다. 물론 이때 메인 데이터베이스의
스프링 빈을 등록할 때 @Qualifier 를 지정해주는 것은 상관없다.

우선순위
@Primary 는 기본값 처럼 동작하는 것이고, @Qualifier 는 매우 상세하게 동작한다. 이런 경우 어떤 것이
우선권을 가져갈까? 스프링은 자동보다는 수동이, 넒은 범위의 선택권 보다는 좁은 범위의 선택권이 우선
순위가 높다. 따라서 여기서도 @Qualifier 가 우선권이 높다.

-----------------------------------------------

애노테이션 직접 만들기
@Qualifier("mainDiscountPolicy") 이렇게 문자를 적으면 컴파일시 타입 체크가 안된다. 다음과 같은
애노테이션을 만들어서 문제를 해결할 수 있다


@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE, ElementType.ANNOTATION_TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Qualifier("mainDiscountPolicy")
public @interface MainDiscountPolicy {

}

@Component
@MainDiscountPolicy
public class RateDiscountPolicy implements DiscountPolicy {}

@Autowired
public OrderServiceImpl(MemberRepository memberRepository, @MainDiscountPolicy DiscountPolicy discountPolicy) {
	this.memberRepository = memberRepository;
	this.discountPolicy = discountPolicy;
}

-----------------------------------------------
조회한 빈이 모두 필요할 때, List, Map

@Component
static class DiscountService {
	private final Map<String, DiscountPolicy> policyMap;
	private final List<DiscountPolicy> policies;
	
	public DiscountService(Map<String, DiscountPolicy> policyMap, List<DiscountPolicy> policies) {
		this.policyMap = policyMap;
		this.policies = policies;
		System.out.println("policyMap = " + policyMap);
		System.out.println("policies = " + policies);
	}
	
	public int discount(Member member, int price, String discountCode) {
		DiscountPolicy discountPolicy = policyMap.get(discountCode);
		System.out.println("discountCode = " + discountCode);
		System.out.println("discountPolicy = " + discountPolicy);
		return discountPolicy.discount(member, price);
	}
}


이런 경우 수동 빈으로 등록하거나 또는 자동으로하면 특정 패키지에 같이 묶어두는게 좋다! 
핵심은 딱 보고 이해가 되어야 한다!


-----------------------------------------------
disposable
형용사
1.사용 후 버리게 되어 있는, 일회용의
disposable gloves / razors  일회용 장갑/면도기
2. 이용 가능한
disposable assets/capital/resources 이용 가능한 자산/자본/자원

스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려주는 다양한
기능을 제공한다. 또한 스프링은 스프링 컨테이너가 종료되기 직전에 소멸 콜백을 준다.


스프링은 크게 3가지 방법으로 빈 생명주기 콜백을 지원한다.

- 인터페이스(InitializingBean, DisposableBean)
  참고: 인터페이스를 사용하는 초기화, 종료 방법은 스프링 초창기에 나온 방법들이고, 지금은 다음의 더
  나은 방법들이 있어서 거의 사용하지 않는다.
  
- 설정 정보에 초기화 메서드, 종료 메서드 지정
	설정 정보에 @Bean(initMethod = "init", destroyMethod = "close") 처럼 초기화, 소멸 메서드를
	지정할 수 있다.
	@Bean의 destroyMethod 는 기본값이 (inferred) (추론)으로 등록되어 있다.
	이 추론 기능은 close , shutdown 라는 이름의 메서드를 자동으로 호출해준다. 이름 그대로 종료
	메서드를 추론해서 호출해준다.
	따라서 직접 스프링 빈으로 등록하면 종료 메서드는 따로 적어주지 않아도 잘 동작한다.
  추론 기능을 사용하기 싫으면 destroyMethod="" 처럼 빈 공백을 지정하면 된다.
  
- @PostConstruct, @PreDestroy 애노테이션 지원




정리
@PostConstruct, @PreDestroy 애노테이션을 사용하자
코드를 고칠 수 없는 외부 라이브러리를 초기화, 종료해야 하면 @Bean 의 initMethod , destroyMethod
를 사용하자

-----------------------------------------------


빈 스코프

스프링은 다음과 같은 다양한 스코프를 지원한다.
- 싱글톤: 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.
- 프로토타입: 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는
  매우 짧은 범위의 스코프이다.
- 웹 관련 스코프
  request: 웹 요청이 들어오고 나갈때 까지 유지되는 스코프이다.
  session: 웹 세션이 생성되고 종료될 때 까지 유지되는 스코프이다.
  application: 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프이다.


@Scope("prototype")
@Component

- @Scope("prototype")
  여기서 핵심은 스프링 컨테이너는 프로토타입 빈을 생성하고, 의존관계 주입, 초기화까지만 처리한다는
  것이다. 클라이언트에 빈을 반환하고, 이후 스프링 컨테이너는 생성된 프로토타입 빈을 관리하지 않는다.
  프로토타입 빈을 관리할 책임은 프로토타입 빈을 받은 클라이언트에 있다. 그래서 @PreDestroy 같은 종료
  메서드가 호출되지 않는다.
  
  
프로토타입 스코프 - 싱글톤 빈과 함께 사용시 Provider로 문제 해결
가장 간단한 방법은 싱글톤 빈이 프로토타입을 사용할 때 마다 스프링 컨테이너에 새로 요청하는 것이다.
static class ClientBean {

	@Autowired
	private ApplicationContext ac;
	
	public int logic() {
	
		PrototypeBean prototypeBean = ac.getBean(PrototypeBean.class);
		
		prototypeBean.addCount();
		int count = prototypeBean.getCount();
		return count;
	}
}

실행해보면 ac.getBean() 을 통해서 항상 새로운 프로토타입 빈이 생성되는 것을 확인할 수 있다.
의존관계를 외부에서 주입(DI) 받는게 아니라 이렇게 직접 필요한 의존관계를 찾는 것을 Dependency
Lookup (DL) 의존관계 조회(탐색) 이라한다.
그런데 이렇게 스프링의 애플리케이션 컨텍스트 전체를 주입받게 되면, 스프링 컨테이너에 종속적인 코드가
되고, 단위 테스트도 어려워진다.


ObjectFactory, ObjectProvider
지정한 빈을 컨테이너에서 대신 찾아주는 DL 서비스를 제공하는 것이 바로 ObjectProvider 이다. 참고로
과거에는 ObjectFactory 가 있었는데, 여기에 편의 기능을 추가해서 ObjectProvider 가 만들어졌다.

--------------------------------------------------

@Scope(value = "request")


@Component
@Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS)

여기가 핵심이다. proxyMode = ScopedProxyMode.TARGET_CLASS 를 추가해주자.
적용 대상이 인터페이스가 아닌 클래스면 TARGET_CLASS 를 선택
적용 대상이 인터페이스면 INTERFACES 를 선택
이렇게 하면 MyLogger의 가짜 프록시 클래스를 만들어두고 HTTP request와 상관 없이 가짜 프록시
클래스를 다른 빈에 미리 주입해 둘 수 있다.


동작 정리
CGLIB라는 라이브러리로 내 클래스를 상속 받은 가짜 프록시 객체를 만들어서 주입한다.
이 가짜 프록시 객체는 실제 요청이 오면 그때 내부에서 실제 빈을 요청하는 위임 로직이 들어있다.
가짜 프록시 객체는 실제 request scope와는 관계가 없다. 그냥 가짜이고, 내부에 단순한 위임 로직만
있고, 싱글톤 처럼 동작한다.

---------------------------------------------------------------------------

org.springframework.web.servlet.DispatcherServlet

1. HandlerExecutionChain mappedHandler = getHandler(processedRequest);
[org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping@48495ba9, org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping@6485b253, org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping@30bcb59a, org.springframework.web.servlet.function.support.RouterFunctionMapping@35b5fd97, org.springframework.boot.autoconfigure.web.servlet.WelcomePageNotAcceptableHandlerMapping@37a36c9b, org.springframework.web.servlet.handler.SimpleUrlHandlerMapping@7e7d5716]

uri에 매칭 되는 핸들러 리턴 HandlerExecutionChain
HandlerExecutionChain 에는 url을 처리할 @Controller 에 대한 Bean, 처리메소드 정보, interceptorList를 가지고 있음.


2.  HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());
[org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter@6ad28e25, org.springframework.web.servlet.function.support.HandlerFunctionAdapter@26b65bb1, org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter@4fd55686, org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter@3d3a80d8]

처리 Adapter 찾기.

3. HandlerAdapter 에서 handle 호출 (하면 해당  controller 메소드 호출)

4. viewResolver에서
   - InternalResourceView   ,   JstlView extends InternalResourceView 
   - ThymeleafView

5. HandlerMethodArgumentResolver 인데 줄여서 ArgumentResolver 라고 부른다.   
(스프링은 30개가 넘는 ArgumentResolver 를 기본으로 제공한다)

Spring에서 Resolver의 동작은 아래와 같은 과정으로 이루어진다.
  - Client Request 요청
  - Dispatcher Servlet에서 해당 요청 처리
  - Client Request에 대한 Handler Mapping
   3.1 RequestMapping에 대한 매칭 (RequestMappingHandlerAdapter가 수행)
   3.2 Interceptor 처리
   3.3 Argument Resolver 처리 <-- Argument Resolver 실행 지점
   3.4 Message Converter 처리

6. HandlerMethodReturnValueHandler 를 줄여서 ReturnValueHandler 라 부른다.
(스프링은 10여개가 넘는 ReturnValueHandler 를 지원한다)

7. HttpMessageConverter

기능 확장은 WebMvcConfigurer 를 상속 받아서 스프링 빈으로 등록


------------------------------------------
org.springframework.util.StreamUtils

ServletInputStream inputStream = request.getInputStream();
String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);

com.fasterxml.jackson.databind.ObjectMapper

HelloData helloData = objectMapper.readValue(messageBody, HelloData.class);
String result = objectMapper.writeValueAsString(data);

