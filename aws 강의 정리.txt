aws 강의 정리


arn : amazon resource name

AWS 서비스 접근제어방식
- 사용자 중심 접근 제어 : IAM
- 리소스 중심 접근 제어 : s3, Glacier, ...



리전
-리전 선택시 해당 지역의 법적인 문제등 고려
-비용은 리전별로 다릅니다.
-리전 선택시 지연시간도 고려


az
- 가용영역



엣지로케이션 : CDN을 제공하기 위해 만든서비스, 대표적으로 cloud front 서비스




S3
- 리젼 scope의 서비스
- simple stroage service
- 객체(파일?) 수준 스토리지
- bucket을 만들었다(s3 생성했다), bucket name 전 세계적으로 uniq 해야함	 
- 웹기반으로 uri 르 통해서 파일 접근이 가능함.
- 이벤트 트리거제공 (lamda application 가 실행되도록 할 수 있음)
- https://[bucket name].s3.amazonaws.com/[file name]
- 기본값 : 비공개
- 버젼관리 제공함. (디폴트는 사용암함)
- 모범 사용사례 : 한번쓰고 여러번 읽어야하는 경우
- 이상적인 사용사례가 아닌경우 : 자주 바뀌는 데이타, 장기 아카이브 스토리(<-- s3 glacier를 사용하는게 적당)
- 비용 : 스토리지용량, 다른 리전 또는 인터넷으로 전송, put,copy,post,list 및 get 요청
       Amazon S3로 수신하는경우는 무료, 동일한 리전내 amazon ec2로 전송하는경우 무료
       s3 glacier 에서 데이타를 검색하는 경우
- s3 Standard -> s3 standard IA -> s3 Glacier  (접속빈도수에 따라)       
- Amazon S3 인텔리전트 티어링 : 스토리지의 두 액세스 티어 사이에서 자동으로 객체 이동



EC2 (Elastic Computing Cloud)
- 웹호스팅, 데이타베이스, 인증, 서버가 처리할수 있는 모든것
- AMI (Amazon Machine Image) : 루트 볼률용 템플릿 (OS + 템플릿)
- m5.large (m:패밀리 이름, 5:세대번호, large:인스턴스 크기)
- t시리즈는 놀고 있는 cpu에 대해서 save한후 사용할수 있다.
- 요금
  온디맨드 인스턴스 : 사용한 만큼 지불
  예약(RI) 인스턴스 : 용량에 대한 비용을 미리 지불 (비용절감)
  savings plans : ri 구매를 조정할 필요가 없음.
  스팟 인스턴스 : 미사용 ec2 용량 구매
- 전용 인스턴스 : 다른 고객이랑 하드웨어를 나눠 쓰지 않는다.
- 전용 호스트 : 
- aws리소스에 메타데이타 태그를 할당(리소스 구분에 도움이 됨, 태그는 너무 적게 사용하는것보다 너무 많이 사용하는것이 낫습니다.)



EBS (Elastic Block Store)
- AZ scope
- 하나의 EC2에 연결되어서 사용되어짐. (동시에 ec2에 연결안됨)
- 인스턴스 스토리지는 휘발성입니다. (데이타 볼륨을 백업할 수 있어야 합니다.)
- 종료시까지 지속되는 데이타가 필요합니다.
- ec2와 인스턴스는 같은 하드웨어 장비에 존재한다.
- ssd 기반 (범용 ssd, 프로비저닝된 ssd)
- 하드디스크기반


EFS(리눅스 기반) / FSX(윈도우 기반)
- 공유 파일 시스템
- ec2 여러게 연결 가능


database
- 관계형 sql : 수직적 확장
- nosql : 수평적 확장
- 관리형서비스 , 비관리형서비스(ec2에 db 설치하여 사용)


iam
- global scope
- 관리자라고 해도 root 계정보다는 해당 자격의 사용자를 이용


VPC (Amazon Virtual Private Cloud)
- vpc 리전 내 모든 가용 영역의 리소스를 호스팅 할 수 있다.
- 서비스 제한 : 계정당 리전당 VPC 5개 (soft limit기 떄문에 신청해서 변경할 수 있음.)
- 서브넷을 사용하여 vpc 분리
- 각 서브넷에 5개의 IP주소가 예약되어잇음(brodcast, gateway, name server ...)
- 작은크기 2보다는 큰 크기(최소 24는 해야될듯)의 서브넷을 고려해야함(CIDR 표기  10.0.1.0 /24 )
  (뒤에 크기는 변경 못하는듯)
- 상태 저장 규칙을 따름 (인바운드가 허용되어 있으면 연결후 ob도 가능)
- vpc 연결 (vpc 피어링)
  전이적 피어링은 제공하지 핞음(3개의 vpc가 있을때 거쳐서 연결될수는 없음, 각자 허용해야함) 
  CIDR 주소가 중복되면 안됨. (vpc 주소가 중복되지 않게 설정하는게 좋겠다. 10.1.0.0 /16,  10.2.0.0 / 16)
  

SG (security group)
- 기본적으로 ob에 대해서는 모두 허용 , ib 대해서는 거절되어있음.


ELB (Elastic Load Balancing)
- application load balancer :http 및 https (요청수준(7 layer))
  경로기반 라우팅(/orders, /images ...)
- Network Load Balancer : TCP 및 UDP (요청수준(4 layer))
- 고가용성, 상태확인, 보안기능
- Connection Drainging(등록취소지연) : 인스턴스를 제어해야 하지만 사용자에게 영향을 미치지 않을려는 경우

<Auto Scaling Policy>
-수동으로 조정 : 원하는 개수 조정
-자동 조정
  a. 초기값유지 : 2/2/2
  b. 단순조정정책
  c. 단계조정정책
  d. 대상추적조정정책
  예약
  예측
  




네트워크 ACL(NACL) 액세스 제어 목록)
- 서브넷 경계의 방화벽
- 상태 비정장이므로 인바운드 및 아웃바운드 트래픽 모드에 대한 명시적인 규칙이 필요함


route 53
- DNS 서비스 제공
- 멀티플 라우팅 옵션 제공



Iac의 이점(코드형 인프라)
- script를 CloudFormation 을 통해 생성
- CloudFormation에 조건문을 사용해서 다른 타입으로 생성도 가능
- 스택 업데이트
- 계층화된 아키텍처를 권장
  프런트앤드
  백엔드
  공유
  기본네트워크
  자격증명  에 대해서 하나씩 스크립트 생성
AWS Quick Start 를 통한 표준화된 템플릿을 제공

AWS OpsWorks를 사용하여 애플리케이션 계층을 배포

AWS Elastic Beanstalk - 환경ㅉ
- application 환경 구축


AWS CloudFront
- 엣지로케이션에 캐쉬 서비스

AWS WAF
-방화벽 서비스(ddos공격등 방어)

세션관리
-세션쿠키 
-Load Balancing으로 세션이 분리되는거 방지하는 방법이 있다는데.
-특정서버로 접속하게 (고정세션기능)
-dynamoDB를 사용해서 관리 (session server기능)


Amazon SQS


Amazon SNS (Simple Notification Service)
-이메일,http/https, sms, amazon sqs 대기열, aws Lambda함수
-주문 및 전달을 보장할 수 없음.


ECS(Amazon Elastic Container)
-인프라 구축의 복잡성을 제거함. docker 기분인가봄


ECR(Elastic Container Registory)


AWS fargate
-완전 관리형 컨테이너 서비스
-클러스터 프로비저닝 및 관리
-실행시간 환경관리


Lambda service(서버리스 컴퓨팅)
- 완전 관리형 컴퓨팅 서비스
- 상태 비저장 코드 실행
- node.js, java, python, c#, go 등 지원
- 일정 또는 이벤트에 대한 응답으로 코드를 실행(예:s3, DynamoDB 테이블의 데이터 변경)
- 엣지에서 실행가능
- 개발자 입장에서는 매우 좋음.
- 서버리스 컴퓨팅
  구성이 아니라 애플리케이션에 집중함
  요청 시에만 컴퓨팅 리소스 사용
  마이크로서비스 아키텍처 구축
  

Api Gateway 서비스
- ec2 서비스 호출
- aws lambda 호출
- 사용자 자격 증명


AWS Step Function


aws 장애서 어떻게 대처할지에 대해서도 고민이 필요하다.



chaos monkey  <-- netflex 가 aws를 이렇게 테스트 한다고하는데.



참고
- iops 아이옵스(Input/Output Operations Per Second, IOPS)는 HDD, SSD, SAN 같은 컴퓨터 저장 장치를 벤치마크하는 데 사용되는 성능 측정 단위
- 프로비저닝 (provisioning)은 사용자의 요구에 맞게 시스템 자원을 할당, 배치, 배포해 두었다가 필요 시 시스템을 즉시 사용할 수 있는 상태로 미리 준비해 두는 것을 말한다


