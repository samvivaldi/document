전체 셀렉터 (Universal Selector)
* { color: red; } : HTML 문서 내의 모든 요소를 선택한다. html 요소를 포함한 모든 요소가 선택된다. (head 요소도 포함된다)
-----------------------------

태그 셀렉터 (Type Selector)
p { color: red; } : 태그명	지정된 태그명을 가지는 요소를 선택한다.

-----------------------------

ID Selector
#p1 { color: red; } : #id 어트리뷰트 값	id 어트리뷰트 값을 지정하여 일치하는 요소를 선택한다. id 어트리뷰트 값은 중복될 수 없는 유일한 값이다.

-----------------------------

Class Selector
.container { color: red; } : .class 어트리뷰트 값	class 어트리뷰트 값을 지정하여 일치하는 요소를 선택한다. class 어트리뷰트 값은 중복될 수 있다.

-----------------------------

Attribute Selector
a[href] { color: red; } : 셀렉터[어트리뷰트]	지정된 어트리뷰트를 갖는 모든 요소를 선택한다.
a[target="_blank"] { color: red; } : 셀렉터[어트리뷰트=”값”]	a 요소 중에 target 어트리뷰트의 값이 "_blank"인 모든 요소
h1[title~="first"] { color: red; } : 셀렉터[어트리뷰트~=”값”]	(h1 요소 중에 title 어트리뷰트 값에 "first"를 단어로 포함하는 요소)
                                     지정된 어트리뷰트의 값이 지정된 값을 (공백으로 분리된) 단어로 포함하는 요소를 선택한다. 
p[lang|="en"] { color: red; } : 셀렉터[어트리뷰트|=”값”]	p 요소 중에 lang 어트리뷰트 값이 "en"과 일치하거나 "en-"로 시작하는 요소
a[href^="https://"] { color: red; } : 셀렉터[어트리뷰트^=”값”]	a 요소 중에 href 어트리뷰트 값이 "https://"로 시작하는 요소
a[href$=".html"] { color: red; } : 셀렉터[어트리뷰트$=”값”]  a 요소 중에 href 어트리뷰트 값이 ".html"로 끝나는 요소
div[class*="test"] { color: red; } : (div 요소 중에서 class 어트리뷰트 값에 "test"를 포함하는 요소 )

-------------------------------

복합 셀렉터 (Combinator)
자신의 1 level 상위에 속하는 요소를 부모 요소, 1 level 하위에 속하는 요소를 자손 요소(자식 요소)라한다.
자신보다 n level 하위에 속하는 요소는 후손 요소(하위 요소)라 한다.

div p { color: red; } : div 요소의 후손요소 중 p 요소 , Descendant Combinator
div > p { color: red; } : div 요소의 자식요소 중 p 요소, Child Combinator

-----------------------------

Sibling Combinator
p + ul { color: red; } : p 요소의 형제 요소 중에 p 요소 바로 뒤에 위치하는 ul 요소를 선택한다.   (Adjacent Sibling Combinator)
p ~ ul { color: red; } : p 요소의 형제 요소 중에 p 요소 뒤에 위치하는 ul 요소를 모두 선택한다.   (General Sibling Combinator)

-----------------------------

pseudo class combinator
가상 클래스는 요소의 특정 상태에 따라 스타일을 정의할 때 사용된다. 특정 상태란 예를 들어 다음과 같다.
- 마우스가 올라와 있을때
- 링크를 방문했을 때와 아직 방문하지 않았을 때
- 포커스가 들어와 있을 때

selector:pseudo-class {
  property: value;
}

    /* a 요소가 hover 상태일 때 */
    a:hover { color: red; }
    /* input 요소가 focus 상태일 때 */
    input:focus { background-color: yellow; }
    
 pseudo-class	Description
 링크 셀렉터(Link pseudo-classes)
:link	셀렉터가 방문하지 않은 링크일 때
:visited	셀렉터가 방문한 링크일 때
:hover	셀렉터에 마우스가 올라와 있을 때
:active	셀렉터가 클릭된 상태일 때
:focus	셀렉터에 포커스가 들어와 있을 때

    /* a 요소가 방문하지 않은 링크일 때 */
    a:link { color: orange; }

    /* a 요소가 방문한 링크일 때 */
    a:visited { color: green; }

    /* a 요소에 마우스가 올라와 있을 때 */
    a:hover { font-weight: bold; }

    /* a 요소가 클릭된 상태일 때 */
    a:active { color: blue; }
    
-----------------------------

UI 요소 상태 셀렉터(UI element states pseudo-classes)
:checked	셀렉터가 체크 상태일 때
:enabled	셀렉터가 사용 가능한 상태일 때
:disabled	셀렉터가 사용 불가능한 상태일 때

/* input 요소가 사용 가능한 상태일 때,
       input 요소 바로 뒤에 위치하는 인접 형제 span 요소를 선택 */
    input:enabled + span {
      color: blue;
    }
    /* input 요소가 사용 불가능한 상태일 때,
       input 요소 바로 뒤에 위치하는 인접 형제 span 요소를 선택 */
    input:disabled + span {
      color: gray;
      text-decoration: line-through;
    }
    /* input 요소가 체크 상태일 때,
       input 요소 바로 뒤에 위치하는 인접 형제 span 요소를 선택 */
    input:checked + span {
      color: red;
    }
    
-----------------------------
 
구조 가상 클래스 셀렉터(Structural pseudo-classes)

:first-child	셀렉터에 해당하는 모든 요소 중 첫번째 자식인 요소를 선택한다.
:last-child	셀렉터에 해당하는 모든 요소 중 마지막 자식인 요소를 선택한다.

:nth-child(n)	셀렉터에 해당하는 모든 요소 중 앞에서 n번째 자식인 요소를 선택한다.
:nth-last-child(n)	셀렉터에 해당하는 모든 요소 중 뒤에서 n번째 자식인 요소를 선택한다.

    /* ol 요소의 자식 요소인 li 요소 중에서 짝수번째 요소만을 선택 */
    ol > li:nth-child(2n)   { color: orange; }
    /* ol 요소의 자식 요소인 li 요소 중에서 홀수번째 요소만을 선택 */
    ol > li:nth-child(2n+1) { color: green; }

    /* ol 요소의 자식 요소인 li 요소 중에서 첫번쨰 요소만을 선택 */
    ol > li:first-child     { color: red; }
    /* ol 요소의 자식 요소인 li 요소 중에서 마지막 요소만을 선택 */
    ol > li:last-child      { color: blue; }

    /* ol 요소의 자식 요소인 li 요소 중에서 4번째 요소 요소만을 선택 */
    ol > li:nth-child(4)    { background: brown; }
 
 
-----------------------------
   
:first-of-type	셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 첫번째 등장하는 요소를 선택한다.
:last-of-type	셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 마지막에 등장하는 요소를 선택한다.
:nth-of-type(n)	셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 앞에서 n번째에 등장하는 요소를 선택한다.
:nth-last-of-type(n)	셀렉터에 해당하는 요소의 부모 요소의 자식 요소 중 뒤에서 n번째에 등장하는 요소를 선택한다.    


/* p 요소의 부모 요소의 자식 요소 중 첫번째 등장하는 p 요소 */
    p:first-of-type  { color: red; }
    /* p 요소의 부모 요소의 자식 요소 중 마지막 등장하는 p 요소 */
    p:last-of-type   { color: blue; }
    /* p 요소의 부모 요소의 자식 요소 중 앞에서 2번째에 등장하는 p 요소 */
    p:nth-of-type(2) { color: green; }
    /* p 요소의 부모 요소의 자식 요소 중 뒤에서 2번째에 등장하는 p 요소 */
    p:nth-last-of-type(2) { color: orange;}

    /* p 요소 중에서 첫번째 자식을 선택 */
    p:first-child { background: brown;}
    
-----------------------------
    
부정 셀렉터(Negation pseudo-class)
:not(셀렉터)	셀렉터에 해당하지 않는 모든 요소를 선택한다.

---------------------------------
. 가상 요소 셀렉터 (Pseudo-Element Selector)

::first-letter	콘텐츠의 첫글자를 선택한다.
::first-line	콘텐츠의 첫줄을 선택한다. 블록 요소에만 적용할 수 있다.
::after	콘텐츠의 뒤에 위치하는 공간을 선택한다. 일반적으로 content 프로퍼티와 함께 사용된다.
::before	콘텐츠의 앞에 위치하는 공간을 선택한다. 일반적으로 content 프로퍼티와 함께 사용된다.
::selection	드래그한 콘텐츠를 선택한다. iOS Safari 등 일부 브라우저에서 동작 않는다.

-----------------------------
정합성 체크 셀렉터(validity pseudo-class)

  /* input 요소 중에서 type 어트리뷰트의 값이 password가 아닌 요소를 선택 */
    input:not([type=password]) {
      background: yellow;
    }
    
/* 1, 4, 7... : 공차가 3인 등차수열 */
    div:not(:nth-of-type(3n+1)) {
      margin-left: 2%;
    }
    /* div 요소 중에서 4번째 이후 등장하는 요소가 아닌 요소만을 선택 */
    div:not(:nth-of-type(n+4)) {
      margin-bottom: 2%;
    }
    
    
-----------------------------

정합성 체크 셀렉터(validity pseudo-class)
:valid(셀렉터)	정합성 검증이 성공한 input 요소 또는 form 요소를 선택한다.
:invalid(셀렉터)	정합성 검증이 실패한 input 요소 또는 form 요소를 선택한다.

		input[type="text"]:valid {
      background-color: greenyellow;
    }

    input[type="text"]:invalid {
      background-color: red;
    }
    
 <label>입력값이 반드시 필요
    <input type="text" required>
  </label>
  <br>
  <label>특수문자를 포함하지 않는 4자리 문자 또는 숫자
    <input type="text" value="ab1!"
      pattern="[a-zA-Z0-9]{4}" required>
  </label>
  <br>
  <label>핸드폰 번호 형식
    <input type="text" value="010-1111-2222"
      pattern="^\d{3}-\d{3,4}-\d{4}$" required>
  </label>
  
-------------------------
  class 추가 삭제
  
  const elem = document.querySelector('div');

  elem.addEventListener('mouseover', function () {
    this.classList.add('hover');
  });

  elem.addEventListener('mouseleave', function () {
    this.classList.remove('hover');
  });
  
  
-------------------------

font-size: 40px;
font-weight: bold;  /* 100 ~ 900 or normal / bold / lighter / bolder */
font-weight: 900;
font-style: italic; /* normal / italic / oblique */

line-height: 100px; /* 16px * 70% */
text-decoration: none;  /* underline, overline, line-through */
text-align: center;    /* left, rigth, center, justify */


white-space: nowrap;   /* nowrap : line break 없음, 자동줄바꿈 없음     , normal, pre , pre-wrap*/


.carousel-view {
    /* 자식 컨텐츠 너비에 fit */
    display: inline-block;
    position: relative;
    margin: 0 auto;
    border: 1px dotted red;
}

.carousel-container {
    /* 자식 컨텐츠의 줄바꿈을 무시하여 1줄로 가로 정렬한다. */
    white-space: nowrap;
    /* inline-block 레벨 요소 뒤에 공백(엔터, 스페이스 등)이 있는 경우, 정의하지 않은 space(4px)가 자동 지정된다. 이것을 회피하는 방법이다. */
    font-size: 0;
    margin: 0;
    padding: 0;
}



{ overflow: scroll; }
div { overflow-y: auto; }


상속
visibility
opacity
font
color
line-height
text-align
white-space

------------------------------
animation
-------------------

div {
      position: absolute;
      width: 100px;
      height: 100px;
      background-color: red;
      animation-name: move;
      animation-duration: 5s;                /* animation-duration은 반드시 지정해야 한다. 지정하지 않는 경우 기본값 0s가 셋팅되어 어떠한 애니메이션도 실행되지 않는다. */
      animation-iteration-count: infinite;
    }
    /* @keyframes rule */
@keyframes move {
  /* 애니메이션 시작 시점 */
  from { left: 0; }
  /* 애니메이션 종료 시점 */
  to   { left: 300px; }
}
또는 아래처럼
@keyframes move {
  0%   { left: 0; }
  50%  { left: 100px; }
  100% { left: 300px; }
}

------------------------------------------
div {
      position: absolute;
      width: 100px;
      height: 100px;
      animation-name: move, fadeOut, changeColor;
      animation-duration: 5s;
      animation-iteration-count: infinite;
}
@keyframes move {
  from { left: 0; }
  to   { left: 300px; }
}
@keyframes fadeOut {
  from { opacity: 1; }
  to   { opacity: 0; }
}
@keyframes changeColor {
  from { background-color: red; }
  to   { background-color: blue; }
}



Chromium edge 문서모드 사용


https://pureinfotech.com/enable-ie-mode-external-websites-edge/